'use strict';

var fs = require('fs'),
    xml2js = require('xml2js');




function doit(callback) {
    fs.readFile(__dirname + '/xml/enUS-v2.xml', function (readError, xml) {
        var parser = new xml2js.Parser();

        parser.parseString(xml, function (parseError, result) {
            var json = {},
                temporaryObject,
                processError = false;

            json.cards = [];




            function processDollar(dollar) {
                var knownProperties = ['version', 'CardID'],
                    key;

                for (key in dollar) {
                    if (knownProperties.indexOf(key) === -1) {
                        console.log('NEW DOLLAR ($) PROPERTY FOUND! = %s %s', key, JSON.stringify(dollar));
                        processError = true;
                    }

                    if (key === 'version') {
                        temporaryObject[key] = +dollar[key];
                    } else {
                        temporaryObject[key] = dollar[key];
                    }
                }
            }




            function processEntourageCard(entourageCards) {
                temporaryObject.EntourageCard = [];

                entourageCards.forEach(function (entourageCard) {
                    temporaryObject.EntourageCard.push({cardID: entourageCard.$.cardID});
                });
            }




            function processPower(powers) {
                /*
                 * Type: Array of Object
                 *
                 * Example Raw data:
                 *
                 *     Power [
                 *         {
                 *             "$": {"definition": "abd20d6f-3dd8-43b8-91c9-122229719018"},
                 *             "PlayRequirement": [
                 *                 {"$":{"reqID":"11","param":""}},
                 *                 {"$":{"reqID":"1","param":""}}
                 *             ]
                 *         }
                 *     ]
                 */

                var knownProperties = ['$', 'PlayRequirement'];

                temporaryObject.Power = [];

                powers.forEach(function (power) {
                    var temporaryPowerObject = {},
                        key;

                    for (key in power) {
                        if (knownProperties.indexOf(key) === -1) {
                            console.log('NEW POWER PROPERTY FOUND! - %s %s', key, JSON.stringify(power));
                            processError = true;
                        }
                    }

                    temporaryPowerObject.definition = power.$.definition;

                    if (Array.isArray(power.PlayRequirement)) {
                        temporaryPowerObject.PlayRequirement = [];

                        power.PlayRequirement.forEach(function (playRequirement) {
                            temporaryPowerObject.PlayRequirement.push({
                                reqID: +playRequirement.$.reqID,
                                param: parseInt(playRequirement.$.param, 10)
                            });
                        });
                    }

                    temporaryObject.Power.push(temporaryPowerObject);
                });
            }




            function processTag(tags) {
                /*
                 * Type: Array of Objects
                 *
                 * With Hearthstone-2.x, the xml format changed to not include
                 * a "name" and to only define the "type" if it is a String.
                 * Now everything is based on enumIDs, which luckily did exist
                 * before.  Without the previous version this would be next to
                 * impossible to determine what each enumID is specifically for.
                 *
                 * Here is a mapping of the old types and names to the enumIDs.
                 *
                 * This list was generated by running the following command
                 * against the raw JSON conversion of the Hearthstone-1.x card
                 * xml file, which I happened to have generated on the update
                 * prior to Hearthstone-2.x being released.
                 *
                 *     node create-json.js | jq -c '.CardDefs.Entity[].Tag[] | {enumId: .["$"].enumID, name: .["$"].name, type: .["$"].type}' | sort | uniq
                 *
                 *
                 * enumID  Name                    Type                   Values
                 * ------  ----------------------  ---------------------  ------
                 * 45      Health                  Number
                 * 47      Atk                     Number
                 * 48      Cost                    Number
                 * 183     CardSet                 CardSet                2-5, 7-8, 11-13, 16
                 * 187     Durability              Number
                 * 199     Class                   Class                  0, 2-11
                 * 200     Race                    Race                   14-15, 17, 20-21, 23-24
                 * 201     Faction                 Faction                1-3
                 * 202     CardType                CardType               3-7, 10
                 * 203     Rarity                  Rarity                 0-5
                 * 215     Recall                  Number                 1
                 * 251     AttackVisualType        AttackVisualType       1-9
                 * 268     DevState                DevState               2
                 * 330     EnchantmentBirthVisual  EnchantmentVisualType  0-3
                 * 331     EnchantmentIdleVisual   EnchantmentVisualType  0-3
                 *
                 * 32      TriggerVisual           Bool                   0 FALSE / 1 TRUE - always 1
                 * 114     Elite                   Bool                   0 FALSE / 1 TRUE
                 * 189     Windfury                Bool                   0 FALSE / 1 TRUE - always 1
                 * 190     Taunt                   Bool                   0 FALSE / 1 TRUE - always 1
                 * 191     Stealth                 Bool                   0 FALSE / 1 TRUE - always 1
                 * 192     Spellpower              Bool                   0 FALSE / 1 TRUE - always 1
                 * 194     Divine Shield           Bool                   0 FALSE / 1 TRUE - always 1
                 * 197     Charge                  Bool                   0 FALSE / 1 TRUE - always 1
                 * 205     Summoned                Bool                   0 FALSE / 1 TRUE - always 1
                 * 208     Freeze                  Bool                   0 FALSE / 1 TRUE - always 1
                 * 212     Enrage                  Bool                   0 FALSE / 1 TRUE - always 1
                 * 217     Deathrattle             Bool                   0 FALSE / 1 TRUE - always 1
                 * 218     Battlecry               Bool                   0 FALSE / 1 TRUE - always 1
                 * 219     Secret                  Bool                   0 FALSE / 1 TRUE - always 1
                 * 220     Combo                   Bool                   0 FALSE / 1 TRUE - always 1
                 * 293     Morph                   Bool                   0 FALSE / 1 TRUE - always 1
                 * 321     Collectible             Bool                   0 FALSE / 1 TRUE
                 * 335     InvisibleDeathrattle    Bool                   0 FALSE / 1 TRUE - always 1
                 * 338     OneTurnEffect           Bool                   0 FALSE / 1 TRUE - always 1
                 * 339     Silence                 Bool                   0 FALSE / 1 TRUE - always 1
                 * 349     ImmuneToSpellpower      Bool                   0 FALSE / 1 TRUE - always 1
                 * 350     AdjacentBuff            Bool                   0 FALSE / 1 TRUE - always 1
                 * 355     GrantCharge             Bool                   0 FALSE / 1 TRUE - Not used in Hearthstone-2.x
                 * 361     HealTarget              Bool                   0 FALSE / 1 TRUE - always 1
                 * 362     Aura                    Bool                   0 FALSE / 1 TRUE - always 1
                 * 363     Poisonous               Bool                   0 FALSE / 1 TRUE - always 1
                 * 367     AIMustPlay              Bool                   0 FALSE / 1 TRUE - always 1
                 * 370     AffectedBySpellPower    Bool                   0 FALSE / 1 TRUE - always 1
                 *
                 * 184     CardTextInHand          String
                 * 185     CardName                String
                 * 252     CardTextInPlay          String
                 * 325     TargetingArrowText      String
                 * 342     ArtistName              String
                 * 351     FlavorText              String
                 * 364     HowToGetThisCard        String
                 * 365     HowToGetThisGoldCard    String
                 *
                 *
                 * New enumIDs found in Hearthstone-2.x
                 *
                 * 377    Found on Flame Leviathan and Burrowing Mine     1 - probably a Bool
                 * 389    Found on Dunemaul Shaman                        1 - probably a Bool
                 */
                var knownTypes = ['String', ''],
                    nameMapper = {};

                nameMapper['32'] = 'TriggerVisual';
                nameMapper['45'] = 'Health';
                nameMapper['47'] = 'Atk';
                nameMapper['48'] = 'Cost';

                nameMapper['114'] = 'Elite';
                nameMapper['183'] = 'CardSet';
                nameMapper['184'] = 'CardTextInHand';
                nameMapper['185'] = 'CardName';
                nameMapper['187'] = 'Durability';
                nameMapper['189'] = 'Windfury';
                nameMapper['190'] = 'Taunt';
                nameMapper['191'] = 'Stealth';
                nameMapper['192'] = 'Spellpower';
                nameMapper['194'] = 'Divine Shield';
                nameMapper['197'] = 'Charge';
                nameMapper['199'] = 'Class';

                nameMapper['200'] = 'Race';
                nameMapper['201'] = 'Faction';
                nameMapper['202'] = 'CardType';
                nameMapper['203'] = 'Rarity';
                nameMapper['205'] = 'Summoned';
                nameMapper['208'] = 'Freeze';
                nameMapper['212'] = 'Enrage';
                nameMapper['215'] = 'Recall';
                nameMapper['217'] = 'Deathrattle';
                nameMapper['218'] = 'Battlecry';
                nameMapper['219'] = 'Secret';
                nameMapper['220'] = 'Combo';
                nameMapper['251'] = 'AttackVisualType';
                nameMapper['252'] = 'CardTextInPlay';
                nameMapper['268'] = 'DevState';
                nameMapper['293'] = 'Morph';

                nameMapper['321'] = 'Collectible';
                nameMapper['325'] = 'TargetingArrowText';
                nameMapper['330'] = 'EnchantmentBirthVisual';
                nameMapper['331'] = 'EnchantmentIdleVisual';
                nameMapper['335'] = 'InvisibleDeathrattle';
                nameMapper['338'] = 'OneTurnEffect';
                nameMapper['339'] = 'Silence';
                nameMapper['342'] = 'ArtistName';
                nameMapper['349'] = 'ImmuneToSpellpower';
                nameMapper['350'] = 'AdjacentBuff';
                nameMapper['351'] = 'FlavorText';
                nameMapper['355'] = 'GrantCharge';
                nameMapper['361'] = 'HealTarget';
                nameMapper['362'] = 'Aura';
                nameMapper['363'] = 'Poisonous';
                nameMapper['364'] = 'HowToGetThisCard';
                nameMapper['365'] = 'HowToGetThisGoldCard';
                nameMapper['367'] = 'AIMustPlay';
                nameMapper['370'] = 'AffectedBySpellPower';
                nameMapper['377'] = 'unknown377';
                nameMapper['389'] = 'unknown389';


                temporaryObject.Tag = {};

                tags.forEach(function (tag) {
                    if (knownTypes.indexOf(tag.$.type) === -1) {
                        console.log('NEW TYPE FOUND! - %s', JSON.stringify(tag));
                        processError = true;
                    }

                    switch (tag.$.enumID) {
                        /*
                         * Unknowns
                         * These are new enumIDs that have been added since
                         * Hearthstone-1.x, so at this point I do not know what
                         * field they map to.  Will treat them as a generic
                         * number until a reason is found not to.
                         */
                        case '377':
                        case '389':

                        /* Numbers */
                        case '45':   /* Health */
                        case '47':   /* Atk */
                        case '48':   /* Cost */
                        case '183':  /* CardSet */
                        case '187':  /* Durability */
                        case '199':  /* Class */
                        case '200':  /* Race */
                        case '201':  /* Faction */
                        case '202':  /* CardType */
                        case '203':  /* Rarity */
                        case '215':  /* Recall */
                        case '251':  /* AttackVisualType */
                        case '268':  /* DevState */
                        case '330':  /* EnchantmentBirthVisual */
                        case '331':  /* EnchantmentIdleVisual */
                            /*
                             * Values: Any Number
                             * The value will be parsed as a Number
                             */
                            temporaryObject.Tag[nameMapper[tag.$.enumID]] = +tag.$.value;
                            break;

                        /* Bools */
                        case '32':   /* TriggerVisual */
                        case '114':  /* Elite */
                        case '189':  /* Windfury */
                        case '190':  /* Taunt */
                        case '191':  /* Stealth */
                        case '192':  /* Spellpower */
                        case '194':  /* Divine Shield */
                        case '197':  /* Charge */
                        case '205':  /* Summoned */
                        case '208':  /* Freeze */
                        case '212':  /* Enrage */
                        case '217':  /* Deathrattle */
                        case '218':  /* Battlecry */
                        case '219':  /* Secret */
                        case '220':  /* Combo */
                        case '293':  /* Morph */
                        case '321':  /* Collectible */
                        case '335':  /* InvisibleDeathrattle */
                        case '338':  /* OneTurnEffect */
                        case '339':  /* Silence */
                        case '349':  /* ImmuneToSpellpower */
                        case '350':  /* AdjacentBuff */
                        case '355':  /* GrantCharge - DEPRECATED since 1.x */
                        case '361':  /* HealTarget */
                        case '362':  /* Aura */
                        case '363':  /* Poisonous */
                        case '367':  /* AIMustPlay */
                        case '370':  /* AffectedBySpellPower */
                            /*
                             * Values: 0-1
                             * The value will be parsed as a Bool
                             * 0 is FALSE
                             * 1 is TRUE
                             */
                            temporaryObject.Tag[nameMapper[tag.$.enumID]] = tag.$.value ? true : false;
                            break;

                        /* Strings */
                        case '184':  /* CardTextInHand */
                        case '185':  /* CardName */
                        case '252':  /* CardTextInPlay */
                        case '325':  /* TargetingArrowText */
                        case '342':  /* ArtistName */
                        case '351':  /* FlavorText */
                        case '364':  /* HowToGetThisCard */
                        case '365':  /* HowToGetThisGoldCard */
                            /*
                             * Values: String
                             * The value will be parsed as a String
                             */
                            temporaryObject.Tag[nameMapper[tag.$.enumID]] = tag._;
                            break;

                        default:
                            console.log('NEW ENUM ID FOUND! - %s', JSON.stringify(tag));
                            processError = true;
                    }
                });
            }




            function processEntity(entity) {
                var property;

                /* make sure we are working with a clean object */
                temporaryObject = {};

                for (property in entity) {
                    switch (property) {
                        case '$':
                            processDollar(entity[property]);
                            break;

                        case 'EntourageCard':
                            processEntourageCard(entity[property]);
                            break;

                        case 'MasterPower':
                            temporaryObject[property] = entity[property];
                            break;

                        case 'Power':
                            processPower(entity[property]);
                            break;

                        case 'Tag':
                            processTag(entity[property]);
                            break;

                        case 'ReferencedTag':
                        case 'TriggeredPowerHistoryInfo':
                            break;

                        default:
                            console.log('NEW PROPERTY FOUND! - %s', property, JSON.stringify(entity[property]));
                            processError = true;
                    }
                }


                /*
                 * See http://stackoverflow.com/questions/728360/most-elegant-way-to-clone-a-javascript-object
                 * for more details on what this is doing.  I choose to go with
                 * the following solution since I know that I do not have any
                 * functions in temporaryObject.
                 */
                json.cards.push(JSON.parse(JSON.stringify(temporaryObject)));
            }


            result.CardDefs.Entity.forEach(processEntity);


            callback(readError || parseError || processError, json);
        });
    });
}




doit(function (error, data) {
    if (!error) {
        console.log(JSON.stringify(data));
    } else {
        console.log('Error: %j', error);
    }
});




//         case 'ReferencedTag':
//             /*
//              * Type: array of objects
//              *
//              * Raw data:
//              *
//              *     ReferencedTag [
//              *         {"$":{"name":"Taunt","enumID":"190","type":"Bool","value":"1"}},
//              *         {"$":{"name":"Charge","enumID":"197","type":"Bool","value":"1"}}
//              *     ]
//              *
//              * This one has an unfortunate name :/
//              *
//              *     ReferencedTag [
//              *         {"$":{"name":"Cant Be Damaged","enumID":"240","type":"Bool","value":"1"}}
//              *     ]
//              *
//              *
//              * Example on temporaryObject:
//              *
//              *     {
//              *         "ReferencedTag": {
//              *             "Taunt": true,           <-- This is a Boolean since the `type` is `Bool`
//              *             "Charge": true
//              *         }
//              *     }
//              *
//              *
//              * Alternate proposal: TODO: I don't remember if properties can start with a number, google this
//              *
//              *     {
//              *         "ReferencedTag": {
//              *             "240": {"name": "Cant Be Damaged", "value": true}
//              *         }
//              *     }
//              *
//              *     {
//              *         "ReferencedTag": {
//              *             "190": {"name": "Taunt", "value": true},
//              *             "197": {"name": "Charge", "value": true}
//              *         }
//              *     }
//              */
//
//         case 'TriggeredPowerHistoryInfo':
//             /*
//              * Type: array of objects
//              *
//              * Raw data:
//              *
//              *     TriggeredPowerHistoryInfo [
//              *         {"$":{"effectIndex":"0","showInHistory":"False"}},
//              *         {"$":{"effectIndex":"1","showInHistory":"False"}}
//              *     ]
//              *
//              *
//              * Example on temporaryObject:
//              *
//              *     {
//              *         "TriggeredPowerHistoryInfo": [
//              *             {"effectIndex": 0, "showInHistory": false},
//              *             {"effectIndex": 1, "showInHistory": false}
//              *         ]
//              *     }
//              */
